# Copyright (c) 2021 Markus Falb <markus.falb@mafalb.at>
# GNU General Public License v3.0+
# see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt
---

- name: debug
  block:
    - name: debug __python_virtualenv
      debug: var=__python_virtualenv

    - name: debug __python_virtualenv_interpreter
      debug: var=__python_virtualenv_interpreter

    - name: debug mafalb_ansible_virtualenv_python
      debug: var=mafalb_ansible_virtualenv_python
  tags:
    - never
    - debug

- name: get info about targeted python interpreter
  mafalb.ansible.python_info:
    executable: "{{ python_interpreter|default(ansible_python.executable) }}"
  register: __reg_targeted_python

- name: debug targeted python interpreter
  debug: var=__reg_targeted_python

- name: get OS specific variables
  with_first_found:
  - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}-py{{ __reg_targeted_python.version.majmin }}-{{ __mafalb_ansible_majmin_version }}.yml"
  - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}-py{{ __reg_targeted_python.version.majmin }}.yml"
  - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
  - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
  - "{{ ansible_os_family }}.yml"
  include_vars:
    file: "{{ __vars_file }}"
  loop_control:
    loop_var: __vars_file

- name: compute the best matching ansible version (if version is not specified) and fix package list
  ansible.builtin.include_vars:
    file: runtime_vars.yml

- name: dependencies are present
  become: true
  package:
    name: "{{ mafalb_ansible_system_dependencies }}"

- name: virtualenv is present
  pip:
    name:
      - pip{{ mafalb_ansible_virtualenv_packages.pip }}
      - setuptools{{ mafalb_ansible_virtualenv_packages.setuptools }}
      - wheel
    virtualenv: "{{ __python_virtualenv }}"
    virtualenv_python: "{{ mafalb_ansible_virtualenv_python if __reg_targeted_python.version.major == 2 else omit }}"
    virtualenv_command: "{{
      mafalb_ansible_virtualenv_command[__reg_targeted_python.version.major]
    }}"
  # register the result and enjoy the absolute path to the virtualenv
  register: __reg_venv

- name: get info about targeted python interpreter
  mafalb.ansible.python_info:
    executable: "{{ __python_virtualenv_interpreter }}"
  register: __reg_targeted_python

- name: debug
  block:
    - name: debug targeted python interpreter
      debug: var=__reg_targeted_python

    - name: debug virtualenv
      debug: var=__reg_venv

    - name: debug __mafalb_ansible_version
      debug: var=__mafalb_ansible_version

    - name: debug __mafalb_ansible_packages
      debug: var=__mafalb_ansible_packages
  tags:
    - never
    - debug

- name: ensure that packages can't pull in unwanted versions of some packages
  block:
    - name: constraints file virtualenv.constraints.txt is present
      template:
        src: constraints/virtualenv.txt.j2
        dest: "{{ __reg_venv.virtualenv }}/virtualenv.constraints.txt"
        backup: true
        mode: '0644'
    - name: constraints file ansible.constraints.txt is present
      template:
        src: constraints/ansible.txt.j2
        dest: "{{ __reg_venv.virtualenv }}/ansible.constraints.txt"
        backup: true
        mode: '0644'
    - name: constraints file for ansible-test is present
      copy:
        src: constraints/ansible-test/v{{ __mafalb_ansible_version }}.txt
        dest: "{{ __reg_venv.virtualenv }}/constraints.txt"
        backup: true
        mode: '0644'

- name: get installed pip packages
  pip_package_info:
    clients: ["{{ __reg_venv.virtualenv }}/bin/pip"]
  register: __reg_pip

# preparing to upgrade ansible
# 1. ansible-base and ansible-core
# 2. ansible-core and ansible==2.9
# 3. ansible-base and ansible==2.9
- name: uninstall ansible and ansible-core
  pip:
    name:
    - ansible
    - ansible-base
    - ansible-core
    state: absent
    virtualenv: "{{ __reg_venv.virtualenv }}"
  when:
  - (('ansible-base' in __reg_pip.packages[__reg_venv.virtualenv +
                                           '/bin/pip']) and
     ('ansible-core' in __reg_pip.packages[__reg_venv.virtualenv +
                                           '/bin/pip'])) or
    ((('ansible-base' in __reg_pip.packages[__reg_venv.virtualenv +
                                            '/bin/pip']) or
      ('ansible-core' in __reg_pip.packages[__reg_venv.virtualenv +
                                            '/bin/pip'])) and
     ('ansible' in __reg_pip.packages[__reg_venv.virtualenv + '/bin/pip']) and
     (__reg_pip.packages[__reg_venv.virtualenv +
                         '/bin/pip']['ansible'][0]['version']) is match('2.9'))

- name: get ansible version
  command: "{{ __python_virtualenv }}/bin/ansible --version"
  failed_when: false
  changed_when: false
  register: __ansible_version

# preparing to upgrade ansible
- name: uninstall ansible and ansible-core
  pip:
    name:
      - ansible
      - ansible-base
      - ansible-core
    state: absent
    virtualenv: "{{ __python_virtualenv }}"
  when:
    - (__mafalb_ansible_version is match('2.11') and
       __ansible_version.stdout|default('') is not
        match('ansible \[core 2.11')) or
      (__mafalb_ansible_version is not match('2.9') and
       __ansible_version.stdout|default('') is match('ansible 2.9'))

- name: debug
  block:
    - name: debug previous installed ansible version
      debug: var=__ansible_version

    - name: debug __mafalb_ansible_packages
      debug: var=__mafalb_ansible_packages
  tags:
    - never
    - debug

- name: packages are present
  pip:
    name: "{{ __mafalb_ansible_packages|difference(ansible_test_packages_not[__reg_targeted_python.version.major]) }}"
    extra_args: "{{ '-U eager' if virtualenv_update is defined else '' }}
       -c {{ __reg_venv.virtualenv }}/virtualenv.constraints.txt
       -c {{ __reg_venv.virtualenv }}/ansible.constraints.txt
       -c {{ __reg_venv.virtualenv }}/constraints.txt"
    virtualenv: "{{ __reg_venv.virtualenv }}"
  register: __pip_packages

- name: pip freeze
  shell: |
    . {{ __python_virtualenv }}/bin/activate
    pip freeze
  changed_when: false
  register: __freeze

- name: debug
  block:
    - name: debug installed pip packages
      debug: var=__pip_packages.name
    - name: debug installed pip packages
      debug: var=__pip_packages.stderr
    - name: debug pip packages
      debug: var=__freeze
  tags:
    - never
    - debug

- name: assert correct ansible version is present
  block:
  # _ansible_version does not work
  # reserved variable ?
  #
  - name: get ansible version
    command: "{{ __python_virtualenv }}/bin/ansible --version"
    changed_when: false
    register: __ansible_version
  - name: assert that the wanted ansible version is present
    assert:
      that:
      - __ansible_version.stdout is
        match('ansible .*{{ __mafalb_ansible_version }}')

...
