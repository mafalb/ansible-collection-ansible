# Copyright (c) 2021 Markus Falb <markus.falb@mafalb.at>
# GNU General Public License v3.0+
# see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt
---

- name: debug
  block:

    - name: debug __mafalb_ansible_version
      debug: var=packages|default(mafalb_ansible_packages|default(['_ansible']))
    - name: debug __mafalb_ansible_version
      debug: var=__mafalb_ansible_version
    - name: debug __mafalb_ansible_packages
      debug: var=__mafalb_ansible_packages
    - name: debug mafalb_ansible_virtualenv_command
      debug: var=mafalb_ansible_virtualenv_command
  tags:
    - never
    - debug

- name: dependencies are present
  become: true
  package:
    name: "{{ mafalb_ansible_system_dependencies }}"

- name: get major version of targeted python
  block:
    - name: get targeted python version step 1
      command: "{{ mafalb_ansible_virtualenv_python }} --version"
      changed_when: false
      register: __reg_virtualenv_python
    - name: get targeted python version step 1
      command: echo {{ __reg_virtualenv_python.stderr
               if __reg_virtualenv_python.stdout|length == 0
               else __reg_virtualenv_python.stdout }}
      changed_when: false
      register: __reg_virtualenv_python
    - name: get major version of targeted python
      command: echo {{ __reg_virtualenv_python.stdout[7] }}
      changed_when: false
      register: __reg_virtualenv_python_maj
    - name: get major.minor version of targeted python
      command: echo {{ __reg_virtualenv_python.stdout.split()[1].split('.')[0:2]|join('.') }}
      changed_when: false
      register: __reg_virtualenv_python_majmin

- name: debug __reg_virtualenv_python
  debug: var=__reg_virtualenv_python
- name: debug __reg_virtualenv_python_maj
  debug: var=__reg_virtualenv_python_maj.stdout
- name: debug __reg_virtualenv_python_majmin
  debug: var=__reg_virtualenv_python_majmin.stdout
- name: debug mafalb_ansible_virtualenv_command
  debug: var=mafalb_ansible_virtualenv_command
- name: debug mafalb_ansible_virtualenv_command 2
  debug: var=mafalb_ansible_virtualenv_command[__reg_virtualenv_python_maj.stdout]

- name: extra dependencies for ansible 2.11 are present
  package:
    name: "{{ mafalb_ansible_extra_deps[__reg_virtualenv_python_majmin.stdout]['2.11'] }}"
  when:
    - __mafalb_ansible_version is match('2.11')
    - mafalb_ansible_extra_deps[__reg_virtualenv_python_majmin.stdout]['2.11'] is defined

- name: extra dependencies for ansible 2.12 are present
  package:
    name: "{{ mafalb_ansible_extra_deps[__reg_virtualenv_python_majmin.stdout]['2.12'] }}"
  when:
    - __mafalb_ansible_version is match('2.12')
    - mafalb_ansible_extra_deps[__reg_virtualenv_python_majmin.stdout]['2.12'] is defined

- name: virtualenv is present
  pip:
    name:
      - pip{{ mafalb_ansible_virtualenv_packages.pip }}
      - setuptools{{ mafalb_ansible_virtualenv_packages.setuptools }}
      - wheel
    virtualenv: "{{ virtualenv|default(mafalb_ansible_virtualenv) }}"
    virtualenv_python: "{{ mafalb_ansible_virtualenv_python if __reg_virtualenv_python_maj.stdout == '2' else omit }}"
    virtualenv_command: "{{
      mafalb_ansible_virtualenv_command[__reg_virtualenv_python_maj.stdout]
    }}"
  # register the result and enjoy the absolute path to the virtualenv
  register: __reg_venv

- name: debug virtualenv
  debug: var=__reg_venv

# ensure that packages can't pull in other versions of some packages
- name: constraints file virtualenv.constraints.txt is present
  template:
    src: constraints/virtualenv.txt.j2
    dest: "{{ __reg_venv.virtualenv }}/virtualenv.constraints.txt"
    backup: true
    mode: '0644'

- name: constraints file constraints.txt is present
  block:
    - name: constraints file for ansible-test is present
      copy:
        src: constraints/ansible-test/v{{ __mafalb_ansible_version }}.txt
        dest: "{{ __reg_venv.virtualenv }}/constraints.txt"
        backup: true
        mode: '0644'

- name: get installed pip packages
  pip_package_info:
    clients: ["{{ __reg_venv.virtualenv }}/bin/pip"]
  register: __reg_pip

# preparing to upgrade ansible
# 1. ansible-base and ansible-core
# 2. ansible-core and ansible==2.9
# 3. ansible-base and ansible==2.9
- name: uninstall ansible and ansible-core
  pip:
    name:
    - ansible
    - ansible-base
    - ansible-core
    state: absent
    virtualenv: "{{ __reg_venv.virtualenv }}"
  when:
  - (('ansible-base' in __reg_pip.packages[__reg_venv.virtualenv +
                                           '/bin/pip']) and
     ('ansible-core' in __reg_pip.packages[__reg_venv.virtualenv +
                                           '/bin/pip'])) or
    ((('ansible-base' in __reg_pip.packages[__reg_venv.virtualenv +
                                            '/bin/pip']) or
      ('ansible-core' in __reg_pip.packages[__reg_venv.virtualenv +
                                            '/bin/pip'])) and
     ('ansible' in __reg_pip.packages[__reg_venv.virtualenv + '/bin/pip']) and
     (__reg_pip.packages[__reg_venv.virtualenv +
                         '/bin/pip']['ansible'][0]['version']) is match('2.9'))

- name: get ansible version
  command: "{{
    virtualenv|default(mafalb_ansible_virtualenv) }}/bin/ansible --version"
  failed_when: false
  changed_when: false
  register: __ansible_version

# preparing to upgrade ansible
- name: uninstall ansible and ansible-core
  pip:
    name:
      - ansible
      - ansible-base
      - ansible-core
    state: absent
    virtualenv: "{{ virtualenv|default(mafalb_ansible_virtualenv) }}"
  when:
    - (__mafalb_ansible_version is match('2.11') and
       __ansible_version.stdout|default('') is not
        match('ansible \[core 2.11')) or
      (__mafalb_ansible_version is not match('2.9') and
       __ansible_version.stdout|default('') is match('ansible 2.9'))


- name: debug previous installed ansible version
  debug: var=__ansible_version

- name: packages are present
  pip:
    name: "{{ __mafalb_ansible_packages|difference(ansible_test_packages_not[__reg_virtualenv_python_maj.stdout]) }}"
    extra_args: "{{ '-U eager' if virtualenv_update is defined else '' }}
       -c {{ virtualenv|default(mafalb_ansible_virtualenv) }}/constraints.txt
       -c {{ virtualenv|default(mafalb_ansible_virtualenv)
           }}/virtualenv.constraints.txt"
    virtualenv: "{{ __reg_venv.virtualenv }}"
  register: __pip_packages

- name: pip freeze
  shell: |
    . {{ virtualenv|default(mafalb_ansible_virtualenv) }}/bin/activate
    pip freeze
  changed_when: false
  register: __freeze

- name: debug
  debug: var=__pip_packages

- name: debug
  debug: var=__freeze

- name: assert correct ansible version is present
  block:
  # _ansible_version does not work
  # reserved variable ?
  #
  - name: get ansible version
    command: "{{
      virtualenv|default(mafalb_ansible_virtualenv) }}/bin/ansible --version"
    changed_when: false
    register: __ansible_version
  - name: assert that the wanted ansible version is present
    assert:
      that:
      - __ansible_version.stdout is
        match('ansible .*{{ __mafalb_ansible_version }}')

...
