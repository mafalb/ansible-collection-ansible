# vim: set ft=yaml ts=2 expandtab:
---

name: CI

on: # yamllint disable-line rule:truthy

  push:
    branches:
    - '**'
    tags-ignore:
    - '*'

  schedule:
  - cron: '40 12 * * 6'

jobs:

  SANITY:

    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false

      matrix:

        include:

        - ansible_version: '2.9'
          python-version: 2.7

        - ansible_version: '2.9'
          python-version: 3.5

        - ansible_version: '2.9'
          python-version: 3.6

        - ansible_version: '2.9'
          python-version: 3.7

        - ansible_version: '2.9'
          python-version: 3.8


        - ansible_version: '2.10'
          python-version: 3.6

        - ansible_version: '2.10'
          python-version: 3.7

        - ansible_version: '2.10'
          python-version: 3.8

        - ansible_version: '2.10'
          python-version: 3.9


        - ansible_core_version: '2.11'
          python-version: 3.6

        - ansible_core_version: '2.11'
          python-version: 3.7

        - ansible_core_version: '2.11'
          python-version: 3.8

        - ansible_core_version: '2.11'
          python-version: 3.9

    env:
      PY_COLORS: 1
      ANSIBLE_FORCE_COLOR: 1
      ANSIBLE_PYTHON_INTERPRETER: ${{ matrix.python-version }}/bin/python

    defaults:
      run:
        working-directory: ansible_collections/mafalb/ansible

    steps:

    - name: checkout collection mafalb.ansible
      uses: actions/checkout@v2
      with:
        path: ansible_collections/mafalb/ansible

    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: python version
      run: |
        python --version
        which python
        whereis python
        python3 --version
        which python3
        whereis python3
        ls -l /opt/hostedtoolcache/Python/

    - name: install shellcheck
      run: sudo apt install shellcheck

    - name: install ansible 2.9/2.10 for python 2.7
      if: ${{ matrix.python-version == '2.7' && matrix.ansible_version }}
      run: |
        pip install virtualenv
        virtualenv ~/virtualenv
        . ~/virtualenv/bin/activate
        pip install wheel
        pip install -U pip setuptools
        pip install "ansible==${{ matrix.ansible_version }}.*" ansible-lint 'flake8<3.9' pylint 'pycodestyle<2.7'

    - name: install ansible for python 2.7
      if: ${{ matrix.python-version == '2.7' && matrix.ansible_core_version }}
      run: |
        pip install virtualenv
        virtualenv ~/virtualenv
        . ~/virtualenv/bin/activate
        pip install wheel
        pip install -U pip setuptools
        pip install "ansible-core==${{ matrix.ansible_core_version }}.*" ansible ansible-lint 'flake8<3.9' pylint 'pycodestyle<2.7'

    - name: install ansible 2.9/2.10 for python 3
      if: ${{ matrix.python-version != '2.7' && matrix.ansible_version }}
      run: |
        python -m venv ~/virtualenv
        . ~/virtualenv/bin/activate
        pip install wheel
        pip install -U pip setuptools
        pip install "ansible==${{ matrix.ansible_version }}.*" ansible-lint flake8 pylint 'pycodestyle<2.7'

    - name: install ansible for python 3
      if: ${{ matrix.python-version != '2.7' && matrix.ansible_core_version }}
      run: |
        python -m venv ~/virtualenv
        . ~/virtualenv/bin/activate
        pip install wheel
        pip install -U pip setuptools
        pip install "ansible-core==${{ matrix.ansible_core_version }}.*" ansible ansible-lint flake8 pylint 'pycodestyle<2.7'

    - name: check ansible version
      run: |
        source ~/virtualenv/bin/activate
        ansible --version
        which ansible-test
        ansible --version | grep "^ansible.* ${{ matrix.ansible_version }}"

    - name: check python version
      run: |
        source ~/virtualenv/bin/activate
        ansible --version | grep "^\s*python.* ${{ matrix.python-version }}"

    - name: lint
      run: |
        source ~/virtualenv/bin/activate
        . tests/lint.sh requirements ${{ matrix.python-version }}

  CI:

    runs-on: ubuntu-20.04
    needs: SANITY

    strategy:
      fail-fast: false

      matrix:

        target:
        - fedora33
        - fedora34
        - c8s
        - centos7
        - centos8
        - rocky8
        - alma8
        - debian9
        - debian10
        - debian11
        - ubuntu16
        - ubuntu18
        - ubuntu20
        - ubuntu2104
        - ubuntu2110

        ansible_version:
        - '2.11'
        - '2.10'
        - '2.9'

        include:

        - target: fedora33
          image: docker.io/fedora:33
          test_molecule: true
          test_controlnode: true

        - target: fedora34
          image: docker.io/fedora:34
          test_molecule: true
          test_controlnode: true

        - target: c8s
          image: quay.io/centos/centos:stream8
          test_molecule: true
          test_controlnode: true

        - target: alma8
          image: quay.io/almalinux/almalinux:8
          test_molecule: true
          test_controlnode: true

        - target: rocky8
          image: quay.io/rockylinux/rockylinux:8
          test_molecule: true
          test_controlnode: true

        - target: centos7
          image: quay.io/centos/centos:7
          test_molecule: true
          test_controlnode: true

        - target: centos8
          image: quay.io/centos/centos:8
          test_molecule: true
          test_controlnode: true

        - target: debian9
          image: docker.io/debian:stretch

        - target: debian10
          image: docker.io/debian:buster

        - target: debian11
          image: docker.io/debian:bullseye
          test_molecule: true
          test_controlnode: true

        - target: ubuntu16
          image: docker.io/ubuntu:xenial

        - target: ubuntu18
          image: docker.io/ubuntu:bionic
          test_molecule: true

        - target: ubuntu20
          image: docker.io/ubuntu:focal
          test_molecule: true
          test_controlnode: true

        - target: ubuntu2104
          image: docker.io/ubuntu:hirsute
          test_molecule: true
          test_controlnode: true

        # ubuntu impish
        - target: ubuntu2110
          image: docker.io/ubuntu:21.10
          test_molecule: true
          test_controlnode: true

    env:
      ANSIBLE_VERSION: ${{ matrix.ansible_version }}
      CI_IMAGE: ${{ matrix.image }}
      CI_HOSTNAME: ci-${{ matrix.target }}
      PY_COLORS: 1
      ANSIBLE_FORCE_COLOR: 1

    defaults:
      run:
        working-directory: ansible_collections/mafalb/ansible

    steps:

      - name: checkout collection ansible
        uses: actions/checkout@v2
        with:
          path: ansible_collections/mafalb/ansible

      - name: install molecule
        run: ansible-playbook -e ansible_python_interpreter=python3 -D playbooks/molecule.yml -t all,debug -e molecule_ansible_version=${{ matrix.ansible_version }}
        env:
          ANSIBLE_COLLECTIONS_PATHS: '../../..'

      - name: check ansible version
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          ansible --version | grep "^ansible.* ${{ matrix.ansible_version }}"

      - name: molecule node scenario
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          molecule test -s node

      - name: molecule default scenario
        if: matrix.test_molecule == true
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          molecule test --destroy never

      - name: molecule update scenario
        if: matrix.test_molecule == true
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          molecule test --destroy never -s update

      - name: molecule controlnode scenario
        if: matrix.test_controlnode == true
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          molecule test -s controlnode

      - name: molecule scenario virtualenv
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          molecule test -s virtualenv

...
