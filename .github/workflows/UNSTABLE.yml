# vim: set ft=yaml ts=2 expandtab:
---

name: UNSTABLE

on:  # yamllint disable-line rule:truthy

  push:
    branches:
    - '**'
    tags-ignore:
    - '*'

jobs:

  UNSTABLE_ANSIBLE_TEST:

    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false

      matrix:

        include:

        - ansible_version: '2.9'
          python_version: '2.7'

        - ansible_version: '2.9'
          python_version: '3.5'

        - ansible_version: '2.9'
          python_version: '3.6'

        - ansible_version: '2.9'
          python_version: '3.7'

        - ansible_version: '2.9'
          python_version: '3.8'


        - ansible_version: '2.10'
          python_version: '3.6'

        - ansible_version: '2.10'
          python_version: '3.7'

        - ansible_version: '2.10'
          python_version: '3.8'

        - ansible_version: '2.10'
          python_version: '3.9'


        - ansible_version: '2.11'
          python_version: 3.6

        - ansible_version: '2.11'
          python_version: 3.7

        - ansible_version: '2.11'
          python_version: 3.8

        - ansible_version: '2.11'
          python_version: 3.9


        - ansible_version: '2.12.0rc1'
          python_version: '3.8'

        - ansible_version: '2.12.0rc1'
          python_version: '3.9'

        - ansible_version: '2.12.0rc1'
          python_version: '3.10'

    env:
      PY_COLORS: 1
      ANSIBLE_FORCE_COLOR: 1
      ANSIBLE_PYTHON_INTERPRETER: python${{ matrix.python_version }}

    defaults:
      run:
        working-directory: ansible_collections/mafalb/ansible

    steps:

      - name: checkout collection ansible
        uses: actions/checkout@v2
        with:
          path: ansible_collections/mafalb/ansible

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: install virtualenv for python 2.7
        if: matrix.python_version == '2.7'
        run: pip install virtualenv

      - name: install molecule
        run: |
          ansible-playbook -D playbooks/install-ansible.yml -e '{"virtualenv_packages":["_ansible==${{ matrix.ansible_version }}", "ansible-lint${{ matrix.ansible_lint_specifier }}", "_ansible_test", "flake8"]}' -e mafalb_ansible_virtualenv_python=python${{ matrix.python_version }} -t all,debug
        env:
          ANSIBLE_COLLECTIONS_PATHS: ../../..

      - name: install shellcheck
        run: sudo apt-get install shellcheck

      - name: check ansible version
        run: |
          source ~/.virtualenvs/ansible/bin/activate
          ansible --version
          ansible --version | grep "^ansible.* ${{ matrix.ansible_version }}"

      - name: check python version
        run: |
          source ~/.virtualenvs/ansible/bin/activate
          ansible --version | grep "^\s*python.* ${{ matrix.python_version }}"

      - name: lint
        run: |
          source ~/.virtualenvs/ansible/bin/activate
          . tests/lint.sh requirements ${{ matrix.python_version }}

      - name: sanity
        run: |
          source ~/.virtualenvs/ansible/bin/activate
          ansible-test sanity --requirements --python ${{ matrix.python_version }}

      - name: unit tests
        run: |
          source ~/.virtualenvs/ansible/bin/activate
          ansible-test units --coverage --requirements --python ${{ matrix.python_version }}


  UNSTABLE_MOLECULE:

    runs-on: ubuntu-20.04
    needs: UNSTABLE_ANSIBLE_TEST

    strategy:
      fail-fast: false

      matrix:

        os:
          # there are special dependencies for fedora35 that are probably not necessary anymore
          - fedora35
          - c8s
          - c9s
          - ubuntu2110

        python_version:
          - '2.7'
          - '3.6'
          - '3.8'
          - '3.9'
          - '3.10'

        ansible_version:
          - '2.9'
          - '2.10'
          - '2.11'
          - '2.12.0rc1'

        include:

          # for now only with installed gcc and libffi-devel
          # waiting for python 3.10 wheel for cffi
          #
          - os: fedora35
            image: quay.io/fedora/fedora:35-x86_64

          - os: c9s
            image: quay.io/centos/centos:stream9-development

          - os: c8s
            image: quay.io/centos/centos:stream8

          # ubuntu impish
          - os: ubuntu2110
            image: docker.io/ubuntu:21.10

        exclude:

          # ansible
          - os: fedora35
            ansible_version: '2.9'
          # python
          - os: fedora35
            python_version: '3.6'
          - os: fedora35
            python_version: '3.8'
          - os: fedora35
            python_version: '3.9'

          # python
          - os: c8s
            python_version: '3.10'
          # python and ansible
          - os: c8s
            python_version: '3.6'
            ansible_version: '2.12'
          - os: c8s
            python_version: '3.9'
            ansible_version: '2.9'

          # ansible
          - os: c9s
            ansible_version: '2.9'
          # python
          - os: c9s
            python_version: '3.6'
          - os: c9s
            python_version: '3.8'
          - os: c9s
            python_version: '3.9'

          - os: ubuntu2110
            ansible_version: '2.9'
          - os: ubuntu2110
            python_version: '3.6'
          - os: ubuntu2110
            python_version: '3.8'

    env:
      ANSIBLE_VERSION: ${{ matrix.ansible_version }}
      PYTHON_VERSION: ${{ matrix.python_version }}
      CI_IMAGE: ${{ matrix.image }}
      CI_HOSTNAME: ci-${{ matrix.os }}
      PY_COLORS: 1
      ANSIBLE_FORCE_COLOR: 1

    defaults:
      run:
        working-directory: ansible_collections/mafalb/ansible

    steps:

      - name: checkout collection ansible
        uses: actions/checkout@v2
        with:
          path: ansible_collections/mafalb/ansible

      - name: install molecule
        run: |
          ansible-playbook -D playbooks/install-molecule.yml -e molecule_ansible_version=${{ matrix.ansible_version }} -t all,debug
        env:
          ANSIBLE_COLLECTIONS_PATHS: ../../..

      - name: install community.docker
        if: matrix.ansible_version != '2.9'
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          ansible-galaxy collection install community.docker
          # necessary for molecule and for mafalb.ansible
          ansible-galaxy collection install community.general

      - name: check ansible version
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          ansible --version | grep "^ansible.* ${{ matrix.ansible_version }}"

      - name: molecule node scenario
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          molecule test -s node

      - name: molecule default scenario
        if: matrix.test_molecule == true
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          molecule test --destroy never

      - name: molecule update scenario
        if: matrix.test_molecule == true
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          molecule test --destroy never -s update

      - name: molecule controlnode scenario
        if: matrix.test_controlnode == true
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          molecule test -s controlnode

      - name: molecule scenario virtualenv
        run: |
          source ~/.virtualenvs/molecule/bin/activate
          molecule test -s virtualenv -- -e ansible_version="${{ matrix.ansible_version }}" -e python_version="${{ matrix.python_version }}"

...
