# vim: set ft=yaml ts=2 expandtab:
---

- name: Verify molecule
  hosts: all,!t_centos6,!t_ubuntuxenial
  vars:
    ansible:
      versions:
      - ''
      - 'ansible2.9.9'
      - 'ansible2.9'

  module_defaults:
    shell:
      executable: /bin/bash

  tasks:

  - name: get locale
    changed_when: false
    command: locale
    register: _locale

  - debug: var=_locale

  - name: jmespath is present
    command: ~/.virtualenvs/molecule{{ item }}/bin/jp.py -h
    changed_when: false
    loop: "{{ ansible.versions }}"

  - name: ansible is present - molecule
    shell: |
      . ~/.virtualenvs/molecule{{ item }}/bin/activate
      ansible --version
    changed_when: false
    loop: "{{ ansible.versions }}"
    register: _ansibles_version

  - name: molecule is present - molecule
    shell: |
      . ~/.virtualenvs/molecule{{ item }}/bin/activate
      molecule --version
    changed_when: false
    loop: "{{ ansible.versions }}"
    register: _molecules_ansible_version

  - name: verify molecule installation
    include_tasks: verify_molecule.yml
    loop: "{{ ansible.versions }}"
    loop_control:
      loop_var: _ansibleversion

  - name: assertions
    assert:
      that:
      - _ansibles_version.results[0].stdout_lines[0] is match('ansible')
      - _ansibles_version.results[0].stdout_lines[0] is match('ansible 2.10.*')
      - _ansibles_version.results[1].stdout_lines[0] is match('ansible 2.9.9')
      - _ansibles_version.results[2].stdout_lines[0] is match('ansible 2.9.*')
      - _ansibles_version.results[2].stdout_lines[0].split()[1] is version(_ansibles_version.results[1].stdout_lines[0].split()[1], '>')
      - _ansibles_version.results[2].stdout_lines[0].split()[1] is version('2.10', '<')



- name: Verify side effects
  hosts: all,!t_centos6,!t_ubuntuxenial
  vars:
    ansible:
      versions:
      - ''
      - 'ansible2.9.9'
      - 'ansible2.9'
    files:
    - tests/testcollection/galaxy.yml
    - tests/testcollection/roles/testrole/README.md
    - tests.testrole/README.md

  tasks:

  - name: assert that we do not use reserved variable names
    assert:
      that:
      - collection is not defined
      - role is not defined
      - galaxy_namespace is not defined
      - author is not defined
      - skeleton_path is not defined
      - license is not defined

  # cast loop argument to a list to make ansible 2.9 happy
  #
  - name: special files in collection and roles are present
    file:
      path: "/tmp/molecule{{ item[0] }}/{{ item[1] }}"
    loop: "{{ ansible.versions | product(files) | list }}"

  - name: all jinja2 variables are interpolated
    shell: grep -r [^$]\{\{ /tmp/molecule{{ item }}/tests/testcollection/.github/workflows
    loop: "{{ ansible.versions }}"
    register: _interpolated
    failed_when: _interpolated.rc == 0
    changed_when: false

...
