# vim: set ft=yaml ts=2 expandtab:
---

- name: CI for custom filters
  hosts: localhost
  tasks:
  - debug: msg="{{ '2.9'|semver }}"

- name: Verify molecule
  hosts: all,!t_centos6,!t_ubuntuxenial

  module_defaults:
    shell:
      executable: /bin/bash

  vars:
    files:
    - tests/testcollection/galaxy.yml
    - tests/testcollection/roles/testrole/README.md
    - tests.testrole/README.md

  tasks:

  - name: get locale
    changed_when: false
    command: locale
    register: _locale

  - debug: var=_locale

  - name: include list of virtualenvs
    include_vars: vars/virtualenvs.yml

  - name: ansible is present - molecule
    shell: |
      . ~/.virtualenvs/{{ item.virtualenv }}/bin/activate
      ansible --version
    changed_when: false
    loop: "{{ virtualenvs }}"
    register: _ansibles_version

  - name: molecule is present - molecule
    shell: |
      . ~/.virtualenvs/{{ item.virtualenv }}/bin/activate
      molecule --version
    changed_when: false
    loop: "{{ virtualenvs }}"
    register: _molecules_version

  - debug: var=_ansibles_version
  - debug: var=_molecules_version
  - debug: var=_ansibles_version.results[3].stdout_lines[0]

  - name: correct version of ansible/molecule is installed
    assert:
      fail_msg: wrong version - {{ _molecules_version.results[0].stdout_lines[0] }} / {{ _ansibles_version.results[0].stdout_lines[0] }}
      that:
      - _ansibles_version.results[0].stdout_lines[0] is match('ansible 2.10.*')
      - _ansibles_version.results[0].stdout_lines[0].split()[1] is version('2.10.0', '>')
      - _molecules_version.results[0].stdout_lines[0].split()[1] is version('3.1.5','>')

      - _ansibles_version.results[1].stdout_lines[0] is match('ansible 2.9.10')
      - _molecules_version.results[1].stdout_lines[0].split()[1] is version('3.1.4','=')

      - _ansibles_version.results[2].stdout_lines[0] is match('ansible 2.9.10')
      - _molecules_version.results[2].stdout_lines[0].split()[1] is version('3.1.4','=')

      - _ansibles_version.results[3].stdout_lines[0] is match('ansible 2.10')
      - _ansibles_version.results[3].stdout_lines[0].split()[1] is version('2.10.1', '=')
      - _molecules_version.results[3].stdout_lines[0].split()[1] is version('3.1.4','=')

      - _ansibles_version.results[4].stdout_lines[0] is match('ansible 2.10')
      - _ansibles_version.results[4].stdout_lines[0].split()[1] is version('2.10.1', '=')
      - _molecules_version.results[4].stdout_lines[0].split()[1] is version('3.1.4','=')

      - _ansibles_version.results[5].stdout_lines[0] is match('ansible 2.9.10')
      - _ansibles_version.results[5].stdout_lines[0].split()[1] is version('2.9.10', '=')
      - _molecules_version.results[5].stdout_lines[0].split()[1] is version('3.1.4','=')

      - _ansibles_version.results[6].stdout_lines[0] is match('ansible 2.9.10')
      - _ansibles_version.results[6].stdout_lines[0].split()[1] is version('2.9.10', '=')
      - _molecules_version.results[6].stdout_lines[0].split()[1] is version('3.1.4','=')

      - _ansibles_version.results[7].stdout_lines[0] is match('ansible 2.10')
      - _ansibles_version.results[7].stdout_lines[0].split()[1] is version('2.10.1', '=')
      - _molecules_version.results[7].stdout_lines[0].split()[1] is version('3.1.4','=')

      - _ansibles_version.results[8].stdout_lines[0] is match('ansible 2.10')
      - _ansibles_version.results[8].stdout_lines[0].split()[1] is version('2.10.1', '=')
      - _molecules_version.results[8].stdout_lines[0].split()[1] is version('3.1.4','=')

  - name: verify molecule installation
    include_role:
      name: verify_molecule
    vars:
      virtualenv: "{{ item.virtualenv }}"
    loop: "{{ virtualenvs }}"


  - name: assert that we do not use reserved variable names
    assert:
      that:
      - collection is not defined
      - role is not defined
      - galaxy_namespace is not defined
      - author is not defined
      - skeleton_path is not defined
      - license is not defined

  - debug: msg="{{ virtualenvs|map(attribute='virtualenv')|product(files)|list }}"

  # cast loop argument to a list to make ansible 2.9 happy
  #
  - name: special files in collection and roles are present
    file:
      path: "/tmp/molecule-{{ item[0] }}/{{ item[1] }}"
    loop: "{{ virtualenvs[:2]|map(attribute='virtualenv')|product(files)|list }}"

  - name: all jinja2 variables are interpolated
    shell: grep -r [^$]\{\{ /tmp/molecule-{{ item.virtualenv }}/tests/testcollection/.github/workflows
    loop: "{{ virtualenvs[:2] }}"
    register: _interpolated
    failed_when: _interpolated.rc == 0
    changed_when: false

...
